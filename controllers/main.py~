# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you 0can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
from openerp import http, SUPERUSER_ID
from openerp.http import request
from openerp.tools.translate import _
from openerp import werkzeug

class creditlimit(http.Controller):

    def generate_google_map_url(self, street, city, city_zip, country_name):
        url = "http://maps.googleapis.com/maps/api/staticmap?center=%s&sensor=false&zoom=8&size=298x298" % werkzeug.url_quote_plus(
            '%s, %s %s, %s' % (street, city, city_zip, country_name)
        )
        return url

    @http.route(['/page/website_credit_limit.creditlimit', '/page/creditlimit'], type='http', auth="public", website=True)
    def contact(self, **kwargs):
        values = {}
        for field in ['credit_limit', 'partner_id', 'bank_name', 'payment_date', 
                      'request_date', 'transection_id','contact_name','name','user_id']:
            if kwargs.get(field):
                values[field] = kwargs.pop(field)
        values.update(kwargs=kwargs.items())
        return request.website.render("website_credit_limit.creditlimit", values)

    def create_creditlimit_request(self, request, values, kwargs):
        """ Allow to be overrided """
        cr, context = request.cr, request.context
        browse_user=request.registry['res.users'].browse(cr,SUPERUSER_ID,request.context.get('uid'))
        #company_id = lambda self,cr,uid,c: request.registry['res.company']._company_default_get(cr, SUPERUSER_ID, 'creditlimit.request',context=c)
        values.update({'state':'draft',
                       'user_id':request.context.get('uid'),
                       'partner_id':browse_user.partner_id.id,
                       #'company_id':company_id,
                       })
        return request.registry['creditlimit.request'].create(cr, SUPERUSER_ID, values, context=dict(context, mail_create_nosubscribe=True))

    def preRenderThanks(self, values, kwargs):
        """ Allow to be overrided """
        company = request.website.company_id
        return {
            'google_map_url': self.generate_google_map_url(company.street, company.city, company.zip, company.country_id and company.country_id.name_get()[0][1] or ''),
            '_values': values,
            '_kwargs': kwargs,
        }

    def get_creditlimit_response(self, values, kwargs):
        values = self.preRenderThanks(values, kwargs)
        return request.website.render(kwargs.get("view_callback", "website_credit_limit.creditlimit_thanks"), values)

    @http.route(['/sale/creditlimit'], type='http', auth="public", website=True)
    def creditlimit(self, **kwargs):
        def dict_to_str(title, dictvar):
            ret = "\n\n%s" % title
            for field in dictvar:
                ret += "\n%s" % field
            return ret

        _TECHNICAL = ['show_info','view_from','view_callback']  # Only use for behavior, don't stock it
        _BLACKLIST = ['id','create_uid','create_date','write_uid','write_date','active']  # Allow in description
        _REQUIRED = ['name','payment_date','bank_name','credit_limit','request_date',
                     'transection_id','contact_name']  # Could be improved including required from model

        post_file = []  # List of file to add to ir_attachment once we have the ID
        post_description = []  # Info to add after the message
        values = {}
        for field_name, field_value in kwargs.items():
            if hasattr(field_value, 'filename'):
                post_file.append(field_value)
            elif field_name in request.registry['creditlimit.request']._fields and field_name not in _BLACKLIST:
                values[field_name] = field_value
            elif field_name not in _TECHNICAL:  # allow to add some free fields or blacklisted field like ID
                post_description.append("%s: %s" % (field_name, field_value))

        if "name" not in kwargs and values.get("contact_name"):  # if kwarg.name is empty, it's an error, we cannot copy the contact_name
            values["name"] = values.get("contact_name")
        # fields validation : Check that required field from model creditlimit_request exists

        error = set(field for field in _REQUIRED if not values.get(field))
        if error:
            values = dict(values, error=error, kwargs=kwargs.items())
            return request.website.render(kwargs.get("view_from", "website_credit_limit.creditlimit"), values)

        # description is required, so it is always already initialized
        if post_description:
            values['description'] += dict_to_str(_("Custom Fields: "), post_description)

        if kwargs.get("show_info"):
            post_description = []
            environ = request.httprequest.headers.environ
            post_description.append("%s: %s" % ("IP", environ.get("REMOTE_ADDR")))
            post_description.append("%s: %s" % ("USER_AGENT", environ.get("HTTP_USER_AGENT")))
            post_description.append("%s: %s" % ("ACCEPT_LANGUAGE", environ.get("HTTP_ACCEPT_LANGUAGE")))
            post_description.append("%s: %s" % ("REFERER", environ.get("HTTP_REFERER")))
            values['description'] += dict_to_str(_("Environ Fields: "), post_description)
        credit_limit_request_id = self.create_creditlimit_request(request, dict(values, user_id=False), kwargs)
        return self.get_creditlimit_response(values, kwargs)
